syntax = "proto3";

package raft;


service RaftService {
    rpc Vote(VoteRequest) returns (VoteResponse);
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
    rpc GetLeader(GetLeaderRequest) returns (GetLeaderResponse);
}

// request votes from other raft
message VoteRequest {
    int32 term = 1;
    int32 candidate_id = 2;
    int32 last_log_index = 3;
    int32 last_log_term = 4;
}

// vote responses
message VoteResponse {
    int32 term = 1;
    bool vote_granted = 2;
}


// append entries to other raft
message AppendEntriesRequest {
    int32 term = 1;
    int32 leader_id = 2;
    int32 prev_log_index = 3;
    int32 prev_log_term = 4;
    repeated LogEntry entries = 5;
    int32 leader_commit = 6;
}

message AppendEntriesResponse {
    int32 term = 1;
    bool success = 2;
}

// Define the different types of actions.
enum Action {
    UNKNOWN = 0;
    LOGIN = 1;
    REGISTER = 2;
    CHECK_USERNAME = 3;
    LOAD_CHAT = 4;
    SEND_MESSAGE = 5;
    PING = 6;
    VIEW_UNDELIVERED = 7;
    DELETE_MESSAGE = 8;
    DELETE_ACCOUNT = 9;
    PING_USER = 10;
  
  }

// commands from chat.proto
message LogEntry {
// Define the action from enum
Action action = 1;

// username + passhash used for creating an deleting accounts
string username = 2;
string passhash = 3;

// used for load chat
string user2 = 4;

// send for sending messages
string sender = 5;
string recipient = 6;
string message = 7;

// pings and undelivered messages
string sent_message = 8;
int32 n_messages = 9;
int32 message_id = 10;

// also include term number, index, and is_heartbeat for raft
int32 term = 11;
int32 index = 12;
bool is_heartbeat = 13;
}

// for clients, get leader
// parameter is useless
message GetLeaderRequest {
    bool useless = 1;
}

message GetLeaderResponse {
    int32 leader_id = 1;
}